
Version 0.1.2. beta

    Added:
		- Added feature to remotely control the application through commands via UDP messages over ethernet, or over a serial "COM" port. Accordingly, serial ports are not only used for camera hardware trigger microcontroller connection anymore. "Remote Control Conn." red/green indicator dot is added to the main window status bar. A dialog for "Remote Control Connection" is added to "Settings" menu of main window. These remote control commands also allow for sending trial increment/"trigger" and arbitrary textual message signals to PupilEXT, which is timestamped and stored as annotations alongside image recording, and also in data .csv recordings. Via these commands, the experiment computer can also set the target image recording or data .csv recording location, which path and name is also checked for irregular characters. Further documentation is added to the "Misc" folder in the repository.
		- Added feature that allows PupilEXT image recordings to have an accompanying annotation file (offline-event-log), which can contain timestamped records associated with trial increment/"trigger" signals and arbitrary textual messages received from the experiment computer, and other events, like camera temperature checks.
		- Added compatibility for any USB Video Class (UVC) camera device, compatible with OpenCV, for educative low-res pupillometry use as well. (Note: those cameras are not advised for research use. For research-grade image acquisition, please use the industrial cameras from Basler.)
		- A trial counter widget is added to the bottom of main window (status bar). This is shown only when a camera (single or stereo physical camera, or an OpenCV-compatible webcam) is connected, and is used in any .csv data recording, image recording, and while streaming. The trial counter is safely reset if the .csv data recording, image recording, or streaming is stopped, meaning that if any other of these still exist, the counter will not be reset to 1. It can also be manually forced to reset in Settings menu (and also via a remote command). This latter functionality is especially useful when not event-related recordings, but resting state recordings are considered, where the exact timing of trial increments is not important, though they can signal sections in a long recording. The counter has a coloured background which changes by each increment, thus instantly catching the attention of the experimenter, signaling that the trial increment triggers are arriving correctly from the experiment computer. This counter in mainwindow status bar does not show up when an image recording in opened. Trial counting and messages in case of image playback is shown in Image Playback Control Dialog, and is read from an "offline-event-log" file accompanying the image recording.
		- Added feature to stream ongoing pupil detection output to a target UDP connection or COM port. The streaming connection can be the same that is already used (already listening) for remote control. It is possible to stream to both UDP or COM connections, although not efficient to do so. Localhost can be used too. Pupil Detection output can be serialized in different formats: "csv" row-like (using the delimiter set globally), JSON, XML and YAML. This widens the application of PupilEXT to uses in e.g. neurofeedback, interactive paradigms and brain-computer interface research. At the moment the streaming feature uses an arbitrary data format and one-way communication for broadcasting, but adding LSL compatibility is also in plan for future.
		- Automatic Parametrization is a new config option in Pupil Detection Settings Dialog, added for each algorithm. Under the hood, these parametrization calculations are done in pupilDetection class, and are based on the maximum expected size of the pupil related to the smaller dimension of the pupil detection ROI rectangle. Even if multiple ROIs can exist (in case of e.g. single camera image, using single-image-for-two-pupil Processing Mode), all existing algorithm instances (correpsonding to these ROIs) are parametrized the same way. This is because of the preassumption that: Case 1: eye(s) seen areas are located in the same distance from the camera lens, and all ROIs have the same size, OR Case 2: eye(s) seen areas are in different distances, but ROIs are differently sized to bound the eye(s) around in the same extent. Note that Automatic Parametrization has a graphically configurable "Expected max. pupil size" setting under camera view windows, in Pupil Detection menu, and "Automatic Parametrization" submenu. The current setting can be viewed using an overlay on the eye image.
		- Added support to several new image formats, that are cross-platform supported by OpenCV. For reading, PupilEXT now supports the following formats and extensions: tiff, tif, png, bmp, jpeg, jpg, jpe, jp2, webp, pgm. For Writing image recordings, the following image formats are supported: tiff, png, bmp, jpeg, webp, pgm.
		- Added settings options to set image recording output image format compression/quality, for the formats: png, jpg and webp. However the user needs to consider that some settings can result in lossy compression, thus a note label is also added to the settings dialog to warn the user about this.
		- The control buttons of pupil detection ROI in the camera view window menu bar, were added a cancel button.
		- Added feature to let the user change image acquisition ROI size and location, as well as binning level, through Camera Settings Dialogs. (Note: Image Acquisition ROI is an internal camera setting, not to be confused with Pupil Detection ROI, which latter is only applied on the already acquired image.) This also involves a graphical guidance (a custom widget) to show where the actually set image acquisition ROI is inside the total image area acquired by the camera sensor. In case of stereo camera, the two will have the same ROIs set.
		- Added feature to automatically store metadata of recording settings alongside image and data recordings, for better reproducibility of recordings. This is written to an XML file in the output folder, and contains settings that may need to be reproduced later for coherent data acquisition along multiple subjects, even is settings are not logged but changed by someone meanwhile. Pupil detection algorithm parameters are not yet implemented to be saved (however, this would be an important to-do in near future).
		- New feature in Settings, where the user can choose from the older (PupilEXT v0.1.1 beta, and the newer v0.1.2 beta) output data .csv file structures.
		- Added feature to check physical camera device coreboard temperature every 5 seconds (if available). This is performed via a camera temperature checker class, running in a separate thread. The resulting measurements are saved alongside with image recordings, and also saved in the converted or live-recorded data .csv files, if the user chooses to use the newer data .csv data structure. Also, there is a new main window status bar icon for signaling whether the camera has reached thermal equilibrium with its environment (its coreboard temperature change was below 0.5 degree Celsius, regarding the last 60 seconds time window, checked every 5 seconds). The indicator will stay gray if there is no sufficient data yet (the camera has not been opened for at least 60 seconds) or in case of an OpenCV webcam, the wrapper of which (right now) does not support querying temperature.
		- Added new feature to let the user precisely control and monitor image recording playback (a new dialog called Image Playback Control Dialog). This is particularly useful when the user wants to understand the conditions that result in good or problematic pupil detection outputs, as they can step frame-by-frame, or set a low playback FPS and see the pupil detection output projected onto the input eye image frame. The user can also jump to a specific timestamp or frame using this dialog. When looping is set to off, it stops playback with taking care of image lag. 
		- Added feature to automatically, iteratively create subfolders if the specified image recording or data .csv output path does not exist (relevant when these paths are specified via remote control commands instead of folder selector dialog in GUI).
		- New feature in Settings, to specify output .csv delimiter symbol. 
		- New feature in Settings, to specify menu icon drawing behaviour for adapting to light/dark mode changes of the OS. This will affect most drawn .svg icons, and also colours of the data table, graph view, camera view windows. This needs restart, thus the program will ask the user, whether they would like to (close all ongoing operations, and safely) restart the application, in order to let the changes take effect.
		- Graph plot windows now adapt to MacOS dark mode.
		- In camera view windows, a "Show" menu has been added a new section in the bottom, where the user can enable a fill overlay inside the detected pupil ellipse. The color of the fill is between green and red, corresponding to 1 and the customizable "lower threshold" value of either the confidence, or outline confidence value outputs of pupil detection. This is supposed to give an instant feedback to the user, if they would like to inspect ongoing pupil detection visually.
		- Added icons to the different types of windows in the Settings menu (which are also assigned to the displayed windows in the workspace), so it is easier for the user to identify them and select them when one is needed.
		- Added separator bars between main window status bar indicator icons, to let the user see more easily which red/green dot belongs to which label.
		- Added functionality to the program that monitors whether the frame grabbing has been unsuccessful for several frames (connection problem or camera failure). If frames are dropped, the user is notified to check camera state and its physical connection to the computer.
		- Added drag-and-drop (DND) feature for image recording folders to be opened easily with PupilEXT for processing.
		- Added "Freeze image" functionality. This is useful when the user tries to set the optics when they cannot see the computer screen temporarily, but only have access to keyboard or mouse. It can be achieved using the "Freeze"/"Unfreeze" button in the camera view windows "Viewport" menu, or using the SHIFT+F key shortcut. (About the "Viewport" menu, refer to the "changes" section of this changelog entry.)
		- Added textual note label to the Pupil Detection Settings Dialog, for algorithm parameter configurations, to state that the "default" hard-coded settings there were only tested for the specific hardware that Zandi et al., 2021 used in their paper introducing PupilEXT, where they used PupilEXT v0.1.1. beta, and might not be applicable if someone uses a different hardware setup. The note is the following: "Configurations marked with an asterisk (*) are recommended for Basler acA2040-120um (1/1.8" format) camera(s) equipped with f=50 mm 2/3" nominal sensor format lens."
		- Added build target configuration for Linux too.
		- Added new Qt5 dependencies: Qt5Network, Qt5Xml
		- Added build process FAQ to the documentation (see in the "Misc" folder of the repository).
		- Added Matlab scripts to the project, with which the contributors can make test image sets, containing a precisely times size change of a black filled circle on a white background. This is supposed to help test the min and max expected pupil size parameters in pupil detection automatic parametrization, and also help testing whether the data are realistically plotted on graph plot windows, shown in the data table window and image playback control window, and serialized as expected, for data writing and streaming. The image sets contain a watermarked timestamp and pupil size in pixel and mm dimensions (regarding a certain DPMM of the images). Also, several trials are generable with the code, with repeating artificial pupillary response, and an event log inside the image folder for signaling the trial increments and message events locked to each response repetition.
		- Added Natvis framework configuration file to the project, which allows the developer to see the contents of variables if they are using Visual Studio Code for development, instead of CLion or another complex IDE.
		- Added stereo camera trigger controller microcontroller support (flashing code) also for Arduino Uno (see in "Misc" folder of the repository).
		- Added ethernet-based connection option to connect to the microcontroller (currently only supplied an example flashing code for Arduino Uno only). This way, the PupilEXT host computer and the experiment computer can be connected even in case of considerable cable length, over an ethernet cable. This is particulary useful in labs that use sophisticated shielding and need long cables to reach from the monitoring room (e.g. EEG labs).
		- Added working example codes for experiment integration: for Matlab with Psychtoolbox-3, and PsychoPy as well. These examples contain the necessary include files that can remote control PupilEXT from an experiment computer to its host computer.
		- Added a graphical camera positioning guide overlay that can be enabled in the camera view windows, in the "Show" menu. The shown crosshair has its center fixed to the sensor center ("lens" center) where the lens distortion is minimal. This little overlay can help the experimenter position the camera(s) to achieve the lowest distortion, and ensure that both cameras are looking at the same target area when using a stereo setup.
		- Added option to the Help menu in the main window, to allow the user to conveniently reset application settings of the Qt QSettings persistent storage (.ini file). Previously, the user had to navigate manually to the .ini file in a hidden folder, and delete it. Now the program offers in a dialog to (safely close all ongoing operations, and) restart itself, in order to let the changes take effect.
		- Added User Guide option to the Help menu of the main window, which opens a window that guides the user through the main steps to use the program.
		- Added option to the General Settings Dialog to keep the application always on top. This needs restart, thus the program will ask the user, whether they would like to (close all ongoing operations, and safely) restart the application, in order to let the changes take effect.
	
    Changed:
		- Pupil detection now uses different "Image Processing Modes", and can work differently on the incoming images, according to how many pupils the program should be tracking. For example 1 or 2 cameras, and 1 or 2 pupils to detect on them. These have separate pupil detection ROIs in camera view windows. An important change under the hood is that, no matter which Processing Mode the incoming image has gone through, the pupil detection class will always emit the same signal, and the detected pupils (one, two, or four Pupils) are now packed into a vector of Pupils, whereas the emitted signal also contains an integer that refers to the enum which specifies which processing mode was used during pupil detection - this way every slot it arrives into, can properly deal with the content. Slots in GraphPlot, DataTable, DataWriter (and a new added class called DataStreamer) have been changed to deal with these new types of signals.
		- New (optional) data .csv file structure version was introduced, which contains three new fields: for trial number tracking, monitoring the temperature of (each) camera, and tracking the textual messages received from the experiment computer. This new structure version also omits the "filename" column.
		- Reworked and simplified workflow for establishing a camera serial connection and starting hardware-triggered image acquisition. Camera serial connection settings dialog does not anymore host a connect/disconnect button, but they are in the camera settings dialogs, as these dialogs are crucial ans already necessary for setting up triggering-related parameters. The GUI is now divided into steps and coloured buttons help the user see an overview and necessary steps in order to start image acquisition with the desired settings. It is important that as framerate limiting (setting the acquisition framerate) is now an available feature only if software triggering (hence only in case of single cameras), because this feature is only useful in case of software triggering.
		- Added special case to the image acquisition triggerng microcontroller flash codes that: when the expected trigger runtime is set to 0 minutes (0 frames) then the triggering will run forever, until a stop signal is sent. To notify the user about this functionality, there is now a "(0=inf)" label next to te trigger runtime setting option in the camera settings dialogs.
		- Timestamps of CameraImage objects leaving imageReader class are now consistent with the time of image acquisition, not the time of image reading operation. This may be clearer (as in case of a real camera, the timestamp variable contains the acquisition timestamp). However, this also necessitates that all image files must have the correct/corresponding timestamp numbers in their names (see code). But this modification makes the "filename" string filed unnecessary. The newest version of the pupil detection output .csv file omits this filename column, as its contents would be always equal to the timestamp column. 
		- Image recordings and .csv data recordings are not always appending the recording, but a driver rule can be configured for each of them in General Settings Dialog. The rule set will decide whether the classes behind these functionalities (imageWriter, dataWriter): 1: always begin a new recording, even if the participant name and saving location is unchanged (automatically invent a new name for the new recording), OR 2: append the existing one, OR 3: ask the user in a dialog every time.
		- A new .csv data file output path and name is automatically assigned upon opening a new image recording. This can of course be reset by the user, just like in the previous version of PupilEXT.
		- In the camera view windows, the "Fit", "100%", "+Zoom", "-Zoom", and the newly added "Freeze" button were moved from /placed in the newly created "Viewport" menu, in order to fit on smaller screen area, and also because the former buttons are rather rarely used.
		- Camera View window and Data Table window options were moved from the "View" menu "Windows" submenu, to simply the "View" menu, for easier access, as (yet) the menu has plenty of space.
		- Data table cells are now read-only on the GUI for the user.
		- Graph Plots, that can be opened from the Data Table window have been reworked to make user interactions easier. Graph plots can now be also opened by simply double clicking a value in the desired row data cells of Data Table. The right click context menu that can be opened for each graph plot now offers clear and user-friendly selectable options for interacting with the x and y axes. The program now also saves the last-used y axis scaling limits and chosen axis options to the application QSettings persistent storage, and loads it (for each data type separately) upon reopening that graph window. 
		- Data table now displays current frame datetime (converted timestamp) only in a hh:mm:ss format, as year, month, day were of no use here. Raw timestamp is also displayed in a new row, which is useful when the user would just like to select the whole table corresponding to one specific frame, and copy its contents.
		- Graph plot windows now do not plot -1.0 (invalid) values but just step on instead.
		- "Pupil FPS" was renamed to "Processing FPS" in the data table window and graph plot window, as it is named like this elsewhere already. Also, "Camera FPS" was renamed here to "Camera/image read FPS" as its purpose was ambigous in case of played back image recordings, where it only represents the file read FPS, not the original camera FPS at the time of recording. Also, in case of image recording playbacks, in camera view windows, the "Camera FPS:" label is changed now to "Image read FPS:" which is more appropriate.
		- Playback loop checkbox and Playback FPS value settings moved to Image Playback Control Dialog from General Settings Dialog. New checkboxes are added to let the user conveniently start and stop the data .csv output recording and/or data streaming with one click at the same time when the image playback is started/stopped. Image Playback Control Dialog also shows the date and time of the image displayed. Accordingly in camera view windows, date and time label was removed, as this feature was only relevant in case of image playbacks.
		- Renamed "Serial settings" dialog to "Microcontroller Connection Settings" as yet not only serial-based connection is supported for conneting to the MCU. Former "Serial Connection" red/green indicator dot in main window status bar is renamed to "Microcontroller Conn."
		- Changed workflow of starting and stopping data recordings by introducing hierarchical order of necessary graphical user interface actions to prevent bugs and crashes. Now a data recording can only be started when pupil tracking is going on. Also, if tracking is stopped, or the camera is closed, any dependent ongoing process is now taken care of, and stopped smoothly, to eliminate the risk of data loss.
		- In camera view windows, Camera FPS and Processing FPS values are now rounded (adaptively, if above 1 FPS) for better visual comparability.
		- In camera view windows, the desired Pupil Detection ROI rectangles now have a minimum size. Also it keeps 4:3 aspect ration when resized, but this rule can be overridden by holding down the "Alt" key. 
		- In camera view windows, the "ROI" menu was renamed to "Pupil Detection ROI" for clarity, and moved into a newly added menu called "Pupil Detection" in the top of the dialog. 
		- Data Table window could be only opened, if there is a camera device open.
		- Pupil detection outcome, as well as the ROIs used for pupil detection are not anymore drawn onto the image inside the pupilDetection class, but in the videoView instance(s) that correspond to the camera view of the opened camera. This gives the advantage that the user can be informed instantly of their actions regarding changing pupil detection ROI sizes and locations.
		- "Calibration" is now mentioned as "Camera calibration" to easily distinguish from the concept of gaze calibration, which is often shortened to "calibration" in the eye-tracking jargon - this latter functionality is not yet supported in PupilEXT, however it may be added to program features in the future. The former calibration icon was changed for a checkerboard pattern pictogram to make it better distinguishable from the gaze calibration routine, which will be added in a release in near future - the latter is universally marked by a crosshair in many other eye tracking programs, so the crosshair icon is now reserved for it.
		- Sharpness validation routine is now only available on the GUI when there is single Basler camera selected, as the program only has this routine working for this case.
		- For better fit on smaller screens, fixed width is set for several widgets like spinboxes or comboboxes on dialogs, while in several cases two lines of widgets were moved into one (relocated to a little horizontal layout). Sometimes text labels were also abbreviated to let the widgets fit on a smaller screen area.
		- Changed the Getting Started Dialog to accomodate a longer introduction and user guide.
		- In the program code, maintenance of different COM/serial and UDP/ethernet connections is now performed by a pool handler class, which maintains all open possible connections. All classes can now query a connection for themselves using these pools, by stating the purpose for which they need the connection (port or socket) instance. If more of them need the same instance, they are assigned the same, already existing instance, to avoid unsuccessful port open actions due to already-in-use reasons (which could anyway happen if e.g. remote control connection is deliberately the same as the connection which is used for outbound communication for streaming).
		- Improved memory management in main window graphical user interface codes, regarding opening/closing windows in the MDI window workspace. Also improved memory management related to single and stereo camera wrapper classes, regarding camera configuration changes and upon camera closing/reopening.
		- The image processing pipeline now always goes through the pupilDetection class, even if no actual pupil detection is taking place.
		- Now using QMap where a key-value structure was useful (e.g. in classes behind pupil detection algorithm parameter configurations, data types and names in data table window and graph plot window).
		- Partially refactored classes for pupil detection algorithm GUI codes, used in the pupil detection settings dialog.
		- Several drawDelay checkings and internal timers existed: in dataTable, camera view windows, graphPlot. They were removed, and instead, the signal-slot connection system was revised to only provide these classes with images and pupil detection output on a lower (GUI) FPS. This way, the number of signals was highly reduced, and the probability of Qt signals piling up was reduced.
		- Changed to "pragma once" header guards everywhere in the main project files, as they can be easier to keep tidy than "ifdef-endif" blocks.
		- Added "$ENV{USER}" CMake variable reference to ./CMakeLists.txt to automatically identify user name on MacOS, thus making configuration easier.
		- Raised Pylon dependency version from 6.0.1 to 6.2.0
	
    Deprecated:
		- Filename field in serialized output.
		- The current state of Subject selection dialog. Instead, meta snapshot functionality and subject configurations should be unified.
	
    Removed:
		- "Tile" option from the "Windows" menu, and the maximize window option from all the MDI area subwindows, as they sometimes messed up the GUI. Also (temporarily) removed the "Close" and "Close all" menu items from the "Windows" menu, as they could not set the pointers of the closed windows (or their encapsulated dialog instances) to nullptr, thus we could not check for their existence later, which caused crash. One option would be to write down every case for each window in a MainWindow function to specially close each different window and set their depending pointers to nullptr. The other option is to remove this functionality from the "Windows" menu. We chose the latter, but the original (slightly modified) code is still there but commented out.
		- Datetime data field is not anymore available for graph plottings. 
		- Removed "Refresh devices" button from single camera selector drop-down menu from the main window. From now on, the device list is automatically updated every time the user clicks the menu, and it appears. Exception handling is improved behing this check too, if an error occurs or the list is empty, the the resulting list will only contain a "No devices." item, which is unclickable. Clicking away and hovering on the manu again will perform the check again.
	
    Fixed:
		- Fixed the bug which made icons invisible in MacOS dark mode.
		- "Open Images Directory" option is now disabled while there is already an image directory opened for playback.
		- Fixed the bug in framerate counter class (missing float conversion), which resulted in overestimating incoming camera image FPS in camera view windows status bar.
		- Fixed the bug that if a camera was open, and the user clicked the close window button on the main window, the program crashed.
		- Fixed the bug that caused crash when path depth was too short for image output directory.
		- Fixed the bug that reset camera selection to its default state upon stereo camera open action. Plus, now the secondary selection box also automatically selects a different camera name if available, so the user does not even have to re-select the secondary camera before opening.
		- Fixed the bug that stereo calibration file could not be saved on Windows if whitespace was in path.
		- Fixed the "Toggle Fullscreen" button in the "View" menu of the main window.
		- Fixed that upon a looping image recording playback is restarted, the graph plot showed wrong data lines /broke. Also, from now on, only one graph plot can be generated for one data type, which is more user friendly.
		- Added safety checks to prevent crash once the camera cable was unplugged unexpectedly (or a physical connection error occured).
		- Added capability for the ImageReader class to not read unimportant files in an images directory. When imageReader is created, it checks the directory contents, and if finds any file that is not of the most common extension locally, it rejects that/those from reading later on. This can prevent crashes resulting from unimportant files happening to be in the image recording folder.
		- Fixed the bug that made graph plot windows beleive that the recording started at the timepoint when the window was opened, thus lead to un-drawn values upon playback loop because of overflown uint64 timestamps. Now they know the absolute timepoint.
		- Solved a race condition problem that arose regarding switching pupil tracking on/off while image recording playback was going on. Now a separate class manages changing between synchronised and non-synchronised working of the pupil detection thread in the background to ensure smooth running.
		- From now on, several main window widgets can be only interacted (they become enabled), when a stereo camera device is actually connected, not only in preparation to get connected using the stereo camera settings dialog.
		- DataTable does not create new cell item objects every time it receives data.
		- Fixed the code that let hardware-triggered image acquisition run from a previously left-on triggering, when stereo cameras were opened fresh.
		- Camera trigger line source options were reduced to 4 from 6, as Basler cameras can only use 4.
		- Fixed that previously several boolean vairables were not read out from QSettings /application preferences correctly. (Serialized as "true"/"false" strings, but always read as true as the parser seeked for "0"/"1" numeric content. Supposedly an inherent bug in Qt 5.15)
		- Ensured several "!pointer" checks in mainwindow.cpp by default-setting (and re-setting) the pointer to nullptr, to prevent eventual crashes upon closing/opening certain MDI subwindows.


Version 0.1.1. beta

	Fixed:
        - The ROI position was not loaded correctly from the user preference file. The previously set ROI position will be reloaded now. (M.L.)
        - Links in the startup wizard were not clickable. (B.Z.)

    Changed:
        - Added the license and copyright statement from GitHub into the "about" window of PupilEXT.
        - Added the citation of the paper into the "about" window of PupilEXT.



Version 0.1.0. beta

	Initial release.
